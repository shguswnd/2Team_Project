/* 등급 */
CREATE TABLE GRADE (
	GRADENAME VARCHAR(10) NOT NULL, /* 등급명 */
	GRADERANGE NUMBER NOT NULL /* 범위 */
);

COMMENT ON TABLE GRADE IS '등급';

COMMENT ON COLUMN GRADE.GRADENAME IS '등급명';

COMMENT ON COLUMN GRADE.GRADERANGE IS '범위';

CREATE UNIQUE INDEX PK_GRADE
	ON GRADE (
		GRADENAME ASC
	);

ALTER TABLE GRADE
	ADD
		CONSTRAINT PK_GRADE
		PRIMARY KEY (
			GRADENAME
		);

/* 카테고리 */
CREATE TABLE CATEGORY (
	BOARDNAME NVARCHAR2(10) NOT NULL /* 게시판이름 */
);

COMMENT ON TABLE CATEGORY IS '카테고리';

COMMENT ON COLUMN CATEGORY.BOARDNAME IS '게시판이름';

CREATE UNIQUE INDEX PK_CATEGORY
	ON CATEGORY (
		BOARDNAME ASC
	);

ALTER TABLE CATEGORY
	ADD
		CONSTRAINT PK_CATEGORY
		PRIMARY KEY (
			BOARDNAME
		);

/* 검색 */
CREATE TABLE SEARCH (
	KEYWORD NVARCHAR2(30) /* 키워드 */
);

COMMENT ON TABLE SEARCH IS '검색';

COMMENT ON COLUMN SEARCH.KEYWORD IS '키워드';

/* 쪽지 */
CREATE TABLE MESSAGE (
	MESSAGEIDX NUMBER NOT NULL, /* 쪽지idx */
	SENDUSERID VARCHAR2(20), /* 보낸이ID */
	USERID VARCHAR2(20) NOT NULL, /* 아이디 */
	MESSAGETITLE VARCHAR(50) NOT NULL, /* 쪽지제목 */
	MESSAGECONTENT VARCHAR(200) NOT NULL, /* 쪽지내용 */
	MESSAGECHECK NUMBER DEFAULT 0, /* 체크 */
	SENDDATE DATE /* 보낸날짜 */
);

COMMENT ON TABLE MESSAGE IS '쪽지';

COMMENT ON COLUMN MESSAGE.MESSAGEIDX IS '쪽지idx';

COMMENT ON COLUMN MESSAGE.SENDUSERID IS '보낸이ID';

COMMENT ON COLUMN MESSAGE.USERID IS '아이디';

COMMENT ON COLUMN MESSAGE.MESSAGETITLE IS '쪽지제목';

COMMENT ON COLUMN MESSAGE.MESSAGECONTENT IS '쪽지내용';

COMMENT ON COLUMN MESSAGE.MESSAGECHECK IS '체크';

COMMENT ON COLUMN MESSAGE.SENDDATE IS '보낸날짜';

CREATE UNIQUE INDEX PK_MESSAGE
	ON MESSAGE (
		MESSAGEIDX ASC
	);

ALTER TABLE MESSAGE
	ADD
		CONSTRAINT PK_MESSAGE
		PRIMARY KEY (
			MESSAGEIDX
		);

/* 댓글 */
CREATE TABLE REPLY (
	REPLYNUM NUMBER NOT NULL, /* 댓글번호 */
	IDX NUMBER NOT NULL, /* 글번호 */
	PARENTREPLY NUMBER, /* 부모댓글 */
	USERID VARCHAR2(20) NOT NULL, /* 댓글단ID */
	CONTENT NVARCHAR2(2000) NOT NULL, /* 내용 */
	REFERNUM NUMBER DEFAULT 0, /* 댓글추천수 */
	DEPTH NUMBER DEFAULT 0, /* 깊이 */
	REPLYCHECK NUMBER, /* 체크 */
	REPLYDATE DATE NOT NULL, /* 작성일 */
	REPLYSTATUS NUMBER /* 댓글상태값 */
);

COMMENT ON TABLE REPLY IS '댓글';

COMMENT ON COLUMN REPLY.REPLYNUM IS '댓글번호';

COMMENT ON COLUMN REPLY.IDX IS '글번호';

COMMENT ON COLUMN REPLY.PARENTREPLY IS '부모댓글';

COMMENT ON COLUMN REPLY.USERID IS '댓글단ID';

COMMENT ON COLUMN REPLY.CONTENT IS '내용';

COMMENT ON COLUMN REPLY.REFERNUM IS '댓글추천수';

COMMENT ON COLUMN REPLY.DEPTH IS '깊이';

COMMENT ON COLUMN REPLY.REPLYCHECK IS '체크';

COMMENT ON COLUMN REPLY.REPLYDATE IS '작성일';

COMMENT ON COLUMN REPLY.REPLYSTATUS IS '댓글상태값';

CREATE UNIQUE INDEX PK_REPLY
	ON REPLY (
		REPLYNUM ASC
	);

ALTER TABLE REPLY
	ADD
		CONSTRAINT PK_REPLY
		PRIMARY KEY (
			REPLYNUM
		);

/* 사용자 */
CREATE TABLE MEMBER (
	USERID VARCHAR2(20) NOT NULL, /* 아이디 */
	STATUS NUMBER DEFAULT 1, /* 상태값 */
	IP VARCHAR(20) NOT NULL /* 아이피 */
);

COMMENT ON TABLE MEMBER IS '사용자';

COMMENT ON COLUMN MEMBER.USERID IS '아이디';

COMMENT ON COLUMN MEMBER.STATUS IS '상태값';

COMMENT ON COLUMN MEMBER.IP IS '아이피';

CREATE UNIQUE INDEX PK_MEMBER
	ON MEMBER (
		USERID ASC
	);

ALTER TABLE MEMBER
	ADD
		CONSTRAINT PK_MEMBER
		PRIMARY KEY (
			USERID
		);

/* 자료 */
CREATE TABLE FILES (
	FILENUM NUMBER NOT NULL, /* 파일번호 */
	IDX NUMBER NOT NULL, /* 글번호 */
	FILENAME NVARCHAR2(100), /* 파일명 */
	FILESIZE NUMBER /* 파일크기 */
);

COMMENT ON TABLE FILES IS '자료';

COMMENT ON COLUMN FILES.FILENUM IS '파일번호';

COMMENT ON COLUMN FILES.IDX IS '글번호';

COMMENT ON COLUMN FILES.FILENAME IS '파일명';

COMMENT ON COLUMN FILES.FILESIZE IS '파일크기';

CREATE UNIQUE INDEX PK_FILES
	ON FILES (
		FILENUM ASC
	);

ALTER TABLE FILES
	ADD
		CONSTRAINT PK_FILES
		PRIMARY KEY (
			FILENUM
		);

/* 좋아요 */
CREATE TABLE LOVE (
	LOVEIDX NUMBER DEFAULT 0 NOT NULL, /* 추천인덱스 */
	IDX NUMBER NOT NULL, /* 글번호 */
	USERID VARCHAR2(20) /* 아이디 */
);

COMMENT ON TABLE LOVE IS '좋아요';

COMMENT ON COLUMN LOVE.LOVEIDX IS '추천인덱스';

COMMENT ON COLUMN LOVE.IDX IS '글번호';

COMMENT ON COLUMN LOVE.USERID IS '아이디';

CREATE UNIQUE INDEX PK_LOVE
	ON LOVE (
		LOVEIDX ASC
	);

ALTER TABLE LOVE
	ADD
		CONSTRAINT PK_LOVE
		PRIMARY KEY (
			LOVEIDX
		);

/* 사용자등급 */
CREATE TABLE USERGRADE (
	USERID VARCHAR2(20) NOT NULL, /* 아이디 */
	GRADENAME VARCHAR(10) NOT NULL, /* 등급명 */
	TOTALLOVECOUNT NUMBER DEFAULT 0 /* 총추천수 */
);

COMMENT ON TABLE USERGRADE IS '사용자등급';

COMMENT ON COLUMN USERGRADE.USERID IS '아이디';

COMMENT ON COLUMN USERGRADE.GRADENAME IS '등급명';

COMMENT ON COLUMN USERGRADE.TOTALLOVECOUNT IS '총추천수';

CREATE UNIQUE INDEX PK_USERGRADE
	ON USERGRADE (
		USERID ASC
	);

ALTER TABLE USERGRADE
	ADD
		CONSTRAINT PK_USERGRADE
		PRIMARY KEY (
			USERID
		);

/* 자격증 */
CREATE TABLE LICENSE (
	LICENSECODE NUMBER NOT NULL, /* 자격증번호 */
	LICENSENAME NVARCHAR2(50) NOT NULL, /* 자격증이름 */
	LICENSESCORE NUMBER NOT NULL /* 자격점수 */
);

COMMENT ON TABLE LICENSE IS '자격증';

COMMENT ON COLUMN LICENSE.LICENSECODE IS '자격증번호';

COMMENT ON COLUMN LICENSE.LICENSENAME IS '자격증이름';

COMMENT ON COLUMN LICENSE.LICENSESCORE IS '자격점수';

CREATE UNIQUE INDEX PK_LICENSE
	ON LICENSE (
		LICENSECODE ASC
	);

ALTER TABLE LICENSE
	ADD
		CONSTRAINT PK_LICENSE
		PRIMARY KEY (
			LICENSECODE
		);

/* 기업 */
CREATE TABLE COMPANY (
	COMPANYNAME NVARCHAR2(50) NOT NULL, /* 기업이름 */
	COMPANYSCORE NUMBER NOT NULL /* 기업점수 */
);

COMMENT ON TABLE COMPANY IS '기업';

COMMENT ON COLUMN COMPANY.COMPANYNAME IS '기업이름';

COMMENT ON COLUMN COMPANY.COMPANYSCORE IS '기업점수';

CREATE UNIQUE INDEX PK_COMPANY
	ON COMPANY (
		COMPANYNAME ASC
	);

ALTER TABLE COMPANY
	ADD
		CONSTRAINT PK_COMPANY
		PRIMARY KEY (
			COMPANYNAME
		);

/* 사용자상세 */
CREATE TABLE MEMBERDETAIL (
	USERID VARCHAR2(20) NOT NULL, /* 아이디 */
	PWD VARCHAR2(30) NOT NULL, /* 패스워드 */
	NAME NVARCHAR2(20) NOT NULL, /* 이름 */
	EMAIL VARCHAR2(50) NOT NULL, /* 이메일 */
	PHONE VARCHAR2(11), /* 핸드폰 */
	ADDRESS NVARCHAR2(100), /* 주소 */
	GENDER VARCHAR2(4) NOT NULL, /* 성별 */
	JOINDATE DATE NOT NULL, /* 가입일 */
	PROFILEPHOTO NVARCHAR2(100) /* 프로필사진 */
);

COMMENT ON TABLE MEMBERDETAIL IS '사용자상세';

COMMENT ON COLUMN MEMBERDETAIL.USERID IS '아이디';

COMMENT ON COLUMN MEMBERDETAIL.PWD IS '패스워드';

COMMENT ON COLUMN MEMBERDETAIL.NAME IS '이름';

COMMENT ON COLUMN MEMBERDETAIL.EMAIL IS '이메일';

COMMENT ON COLUMN MEMBERDETAIL.PHONE IS '핸드폰';

COMMENT ON COLUMN MEMBERDETAIL.ADDRESS IS '주소';

COMMENT ON COLUMN MEMBERDETAIL.GENDER IS '성별';

COMMENT ON COLUMN MEMBERDETAIL.JOINDATE IS '가입일';

COMMENT ON COLUMN MEMBERDETAIL.PROFILEPHOTO IS '프로필사진';

CREATE UNIQUE INDEX PK_MEMBERDETAIL
	ON MEMBERDETAIL (
		USERID ASC
	);

ALTER TABLE MEMBERDETAIL
	ADD
		CONSTRAINT PK_MEMBERDETAIL
		PRIMARY KEY (
			USERID
		);

/* 게시판 */
CREATE TABLE BOARD (
	IDX NUMBER NOT NULL, /* 글번호 */
	USERID VARCHAR2(20), /* 작성자 */
	BOARDNAME NVARCHAR2(10) NOT NULL, /* 게시판이름 */
	TITLE VARCHAR(50) NOT NULL, /* 글제목 */
	CONTENT NVARCHAR2(2000) NOT NULL, /* 글내용 */
	WRITEDATE DATE NOT NULL, /* 작성일 */
	READNUM NUMBER DEFAULT 0, /* 글조회수 */
	LOVENUM NUMBER DEFAULT 0, /* 글추천수 */
	BOARDSTATUS NUMBER, /* 게시판상태값 */
	BOARDHEADER VARCHAR(30) /* 말머리 */
);

COMMENT ON TABLE BOARD IS '게시판';

COMMENT ON COLUMN BOARD.IDX IS '글번호';

COMMENT ON COLUMN BOARD.USERID IS '작성자';

COMMENT ON COLUMN BOARD.BOARDNAME IS '게시판이름';

COMMENT ON COLUMN BOARD.TITLE IS '글제목';

COMMENT ON COLUMN BOARD.CONTENT IS '글내용';

COMMENT ON COLUMN BOARD.WRITEDATE IS '작성일';

COMMENT ON COLUMN BOARD.READNUM IS '글조회수';

COMMENT ON COLUMN BOARD.LOVENUM IS '글추천수';

COMMENT ON COLUMN BOARD.BOARDSTATUS IS '게시판상태값';

COMMENT ON COLUMN BOARD.BOARDHEADER IS '말머리';

CREATE UNIQUE INDEX PK_BOARD
	ON BOARD (
		IDX ASC
	);

ALTER TABLE BOARD
	ADD
		CONSTRAINT PK_BOARD
		PRIMARY KEY (
			IDX
		);

/* 북마크 */
CREATE TABLE BOOKMARKS (
	BOOKIDX NUMBER NOT NULL, /* 북마크인덱스 */
	IDX NUMBER NOT NULL, /* 글번호 */
	USERID VARCHAR2(20), /* 아이디 */
	WRITERID VARCHAR2(20), /* 작성자아이디 */
	TITLE VARCHAR(50) NOT NULL, /* 글제목 */
	WRITEDATE DATE NOT NULL, /* 작성일 */
	LOVENUM NUMBER DEFAULT 0, /* 추천수 */
	BOARDNAME NVARCHAR2(10) NOT NULL /* 게시판이름 */
);

COMMENT ON TABLE BOOKMARKS IS '북마크';

COMMENT ON COLUMN BOOKMARKS.BOOKIDX IS '북마크인덱스';

COMMENT ON COLUMN BOOKMARKS.IDX IS '글번호';

COMMENT ON COLUMN BOOKMARKS.USERID IS '아이디';

COMMENT ON COLUMN BOOKMARKS.WRITERID IS '작성자아이디';

COMMENT ON COLUMN BOOKMARKS.TITLE IS '글제목';

COMMENT ON COLUMN BOOKMARKS.WRITEDATE IS '작성일';

COMMENT ON COLUMN BOOKMARKS.LOVENUM IS '추천수';

COMMENT ON COLUMN BOOKMARKS.BOARDNAME IS '게시판이름';

CREATE UNIQUE INDEX PK_BOOKMARKS
	ON BOOKMARKS (
		BOOKIDX ASC
	);

ALTER TABLE BOOKMARKS
	ADD
		CONSTRAINT PK_BOOKMARKS
		PRIMARY KEY (
			BOOKIDX
		);

/* 팔로우 */
CREATE TABLE FOLLOW (
	FOLLOWNUM NUMBER NOT NULL, /* 팔로우idx */
	USERID VARCHAR2(20), /* 아이디 */
	FOLLOWID VARCHAR2(20) /* 팔로우ID */
);

COMMENT ON TABLE FOLLOW IS '팔로우';

COMMENT ON COLUMN FOLLOW.FOLLOWNUM IS '팔로우idx';

COMMENT ON COLUMN FOLLOW.USERID IS '아이디';

COMMENT ON COLUMN FOLLOW.FOLLOWID IS '팔로우ID';

CREATE UNIQUE INDEX PK_FOLLOW
	ON FOLLOW (
		FOLLOWNUM ASC
	);

ALTER TABLE FOLLOW
	ADD
		CONSTRAINT PK_FOLLOW
		PRIMARY KEY (
			FOLLOWNUM
		);

/* 스펙 */
CREATE TABLE SPEC (
	USERID VARCHAR2(20) NOT NULL, /* 아이디 */
	LICENSECODE NUMBER NOT NULL, /* 자격증번호 */
	PROJECTIDX NUMBER NOT NULL, /* 프로젝트idx */
	SPECTSCORE NUMBER /* 스펙점수 */
);

COMMENT ON TABLE SPEC IS '스펙';

COMMENT ON COLUMN SPEC.USERID IS '아이디';

COMMENT ON COLUMN SPEC.LICENSECODE IS '자격증번호';

COMMENT ON COLUMN SPEC.PROJECTIDX IS '프로젝트idx';

COMMENT ON COLUMN SPEC.SPECTSCORE IS '스펙점수';

CREATE UNIQUE INDEX PK_SPEC
	ON SPEC (
		USERID ASC
	);

ALTER TABLE SPEC
	ADD
		CONSTRAINT PK_SPEC
		PRIMARY KEY (
			USERID
		);

/* 구인게시판 */
CREATE TABLE RECRUITBOARD (
	IDX NUMBER NOT NULL, /* 글번호 */
	STARTDATE DATE, /* 구인시작날짜 */
	ENDDATE DATE, /* 구인종료날짜 */
	LATITUDEMAP NUMBER, /* 지도위도 */
	LOGITUDEMAP NUMBER, /* 지도경도 */
	APPLY NVARCHAR2(100), /* 신청링크 */
	PLACENAME NVARCHAR2(100) /* 장소이름 */
);

COMMENT ON TABLE RECRUITBOARD IS '구인게시판';

COMMENT ON COLUMN RECRUITBOARD.IDX IS '글번호';

COMMENT ON COLUMN RECRUITBOARD.STARTDATE IS '구인시작날짜';

COMMENT ON COLUMN RECRUITBOARD.ENDDATE IS '구인종료날짜';

COMMENT ON COLUMN RECRUITBOARD.LATITUDEMAP IS '지도위도';

COMMENT ON COLUMN RECRUITBOARD.LOGITUDEMAP IS '지도경도';

COMMENT ON COLUMN RECRUITBOARD.APPLY IS '신청링크';

COMMENT ON COLUMN RECRUITBOARD.PLACENAME IS '장소이름';

CREATE UNIQUE INDEX PK_RECRUITBOARD
	ON RECRUITBOARD (
		IDX ASC
	);

ALTER TABLE RECRUITBOARD
	ADD
		CONSTRAINT PK_RECRUITBOARD
		PRIMARY KEY (
			IDX
		);

/* 프로젝트 */
CREATE TABLE PROJECT (
	PROJECTIDX NUMBER NOT NULL, /* 프로젝트idx */
	PROJECTNAME NVARCHAR2(100), /* 프로젝트명 */
	PROJECTDATE DATE /* 프로젝트기간 */
);

COMMENT ON TABLE PROJECT IS '프로젝트';

COMMENT ON COLUMN PROJECT.PROJECTIDX IS '프로젝트idx';

COMMENT ON COLUMN PROJECT.PROJECTNAME IS '프로젝트명';

COMMENT ON COLUMN PROJECT.PROJECTDATE IS '프로젝트기간';

CREATE UNIQUE INDEX PK_PROJECT
	ON PROJECT (
		PROJECTIDX ASC
	);

ALTER TABLE PROJECT
	ADD
		CONSTRAINT PK_PROJECT
		PRIMARY KEY (
			PROJECTIDX
		);

/* 새 테이블 */
CREATE TABLE VISIT (
	V_DATE DATE NOT NULL /* 방문일자 */
);

COMMENT ON TABLE VISIT IS '새 테이블';

COMMENT ON COLUMN VISIT.V_DATE IS '방문일자';

ALTER TABLE MESSAGE
	ADD
		CONSTRAINT FK_MEMBER_TO_MESSAGE2
		FOREIGN KEY (
			USERID
		)
		REFERENCES MEMBER (
			USERID
		);

ALTER TABLE MESSAGE
	ADD
		CONSTRAINT FK_MEMBER_TO_MESSAGE
		FOREIGN KEY (
			SENDUSERID
		)
		REFERENCES MEMBER (
			USERID
		);

ALTER TABLE REPLY
	ADD
		CONSTRAINT FK_BOARD_TO_REPLY
		FOREIGN KEY (
			IDX
		)
		REFERENCES BOARD (
			IDX
		);

ALTER TABLE REPLY
	ADD
		CONSTRAINT FK_REPLY_TO_REPLY
		FOREIGN KEY (
			PARENTREPLY
		)
		REFERENCES REPLY (
			REPLYNUM
		);

ALTER TABLE MEMBER
	ADD
		CONSTRAINT FK_MEMBERDETAIL_TO_MEMBER
		FOREIGN KEY (
			USERID
		)
		REFERENCES MEMBERDETAIL (
			USERID
		)
		ON DELETE CASCADE;

ALTER TABLE FILES
	ADD
		CONSTRAINT FK_BOARD_TO_FILES
		FOREIGN KEY (
			IDX
		)
		REFERENCES BOARD (
			IDX
		)
		ON DELETE CASCADE;

ALTER TABLE LOVE
	ADD
		CONSTRAINT FK_BOARD_TO_LOVE
		FOREIGN KEY (
			IDX
		)
		REFERENCES BOARD (
			IDX
		)
		ON DELETE CASCADE;

ALTER TABLE LOVE
	ADD
		CONSTRAINT FK_USERGRADE_TO_LOVE
		FOREIGN KEY (
			USERID
		)
		REFERENCES USERGRADE (
			USERID
		)
		ON DELETE CASCADE;

ALTER TABLE USERGRADE
	ADD
		CONSTRAINT FK_MEMBER_TO_USERGRADE
		FOREIGN KEY (
			USERID
		)
		REFERENCES MEMBER (
			USERID
		)
		ON DELETE CASCADE;

ALTER TABLE USERGRADE
	ADD
		CONSTRAINT FK_GRADE_TO_USERGRADE
		FOREIGN KEY (
			GRADENAME
		)
		REFERENCES GRADE (
			GRADENAME
		)
		ON DELETE CASCADE;

ALTER TABLE BOARD
	ADD
		CONSTRAINT FK_CATEGORY_TO_BOARD
		FOREIGN KEY (
			BOARDNAME
		)
		REFERENCES CATEGORY (
			BOARDNAME
		)
		ON DELETE CASCADE;

ALTER TABLE BOARD
	ADD
		CONSTRAINT FK_MEMBER_TO_BOARD
		FOREIGN KEY (
			USERID
		)
		REFERENCES MEMBER (
			USERID
		)
		ON DELETE CASCADE;

ALTER TABLE BOOKMARKS
	ADD
		CONSTRAINT FK_BOARD_TO_BOOKMARKS
		FOREIGN KEY (
			IDX
		)
		REFERENCES BOARD (
			IDX
		)
		ON DELETE CASCADE;

ALTER TABLE BOOKMARKS
	ADD
		CONSTRAINT FK_MEMBER_TO_BOOKMARKS
		FOREIGN KEY (
			USERID
		)
		REFERENCES MEMBER (
			USERID
		)
		ON DELETE CASCADE;

ALTER TABLE FOLLOW
	ADD
		CONSTRAINT FK_MEMBER_TO_FOLLOW
		FOREIGN KEY (
			USERID
		)
		REFERENCES MEMBER (
			USERID
		);

ALTER TABLE FOLLOW
	ADD
		CONSTRAINT FK_MEMBER_TO_FOLLOW2
		FOREIGN KEY (
			FOLLOWID
		)
		REFERENCES MEMBER (
			USERID
		);

ALTER TABLE SPEC
	ADD
		CONSTRAINT FK_LICENSE_TO_SPEC
		FOREIGN KEY (
			LICENSECODE
		)
		REFERENCES LICENSE (
			LICENSECODE
		);

ALTER TABLE SPEC
	ADD
		CONSTRAINT FK_MEMBER_TO_SPEC
		FOREIGN KEY (
			USERID
		)
		REFERENCES MEMBER (
			USERID
		);

ALTER TABLE SPEC
	ADD
		CONSTRAINT FK_PROJECT_TO_SPEC
		FOREIGN KEY (
			PROJECTIDX
		)
		REFERENCES PROJECT (
			PROJECTIDX
		);

ALTER TABLE RECRUITBOARD
	ADD
		CONSTRAINT FK_BOARD_TO_RECRUITBOARD
		FOREIGN KEY (
			IDX
		)
		REFERENCES BOARD (
			IDX
		)
		ON DELETE CASCADE;